Example
SELECT songs.song_name, songs.artist
FROM songs
JOIN (
  SELECT user_id
  FROM users
  WHERE country = 'USA'
) AS us_users
ON songs.user_id = us_users.user_id;
* Query structure: 
SELECT songs.song_name, songs.artist
FROM songs
JOIN users
ON songs.user_id = users.user_id
WHERE users.country = 'USA';
* Aggregation: 
SELECT songs.song_name, songs.artist, COUNT(*) as num_plays
FROM songs
JOIN users
ON songs.user_id = users.user_id
WHERE users.country = 'USA'
GROUP BY songs.song_name, songs.artist
ORDER BY num_plays DESC;
Example
CREATE TABLE user_data (
  user_id INT,
  activity_date DATE,
  activity_type VARCHAR(50),
  activity_count INT
)
PARTITION BY RANGE (activity_date) (
  PARTITION p201901 VALUES LESS THAN ('2019-02-01'),
  PARTITION p201902 VALUES LESS THAN ('2019-03-01'),
  PARTITION p201903 VALUES LESS THAN ('2019-04-01'),
  PARTITION p201904 VALUES LESS THAN ('2019-05-01'),
  ...
);
Caching
SELECT * FROM user_videos
WHERE user_id = 12345
ORDER BY video_date DESC
LIMIT 10;

CREATE TABLE users (
  user_id INT,
  username VARCHAR(50),
  email VARCHAR(50)
);
CREATE TABLE user_profiles (
  user_id INT,
  profile_picture VARCHAR(255),
  bio VARCHAR(255)
);
Query profiling 
SELECT AVG(Grade) FROM grades WHERE CourseID = 101;

|--Compute Scalar(DEFINE:([Expr1003]=CASE WHEN [Expr1004]=(0) THEN NULL ELSE [Expr1002] / [Expr1004] END))
   |--Stream Aggregate(DEFINE:([Expr1002]=SUM([tempdb].[dbo].[grades].[Grade]), [Expr1004]=COUNT_BIG(*)))
      |--Clustered Index Scan(OBJECT:([tempdb].[dbo].[grades].[PK__grades__CF5685BE6B41D7B3]), WHERE:([tempdb].[dbo].[grades].[CourseID]=(101)))

CREATE TABLE query_log (
    QueryText NVARCHAR(MAX),
    ExecutionTime DATETIME,
    Duration INT,
    RowsAffected INT
);
Then, we can use a trigger to log all the queries that are executed:
CREATE TRIGGER log_query
ON grades
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    INSERT INTO query_log (QueryText, ExecutionTime, Duration, RowsAffected)
    SELECT
        EVENTDATA().value('(/EVENT_INSTANCE/TSQLCommand/CommandText)[1]', 'NVARCHAR(MAX)'),
        GETDATE(),
        DATEDIFF(ms, EVENTDATA().value('(/EVENT_INSTANCE/StartTime)[1]', 'DATETIME'), EVENTDATA().value('(/EVENT_INSTANCE/EndTime)[1]', 'DATETIME')),
        @@ROWCOUNT;
END;
Query logging
CREATE TABLE query_log (
    query_text NVARCHAR(MAX),
    execution_time DATETIME,
    duration INT,
    rows_affected INT
);
Then, we can create a trigger on the grades table that logs information about each query that is executed:
CREATE TRIGGER log_query
ON grades
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    DECLARE @query_text NVARCHAR(MAX);
    SET @query_text = (SELECT TEXT FROM sys.dm_exec_sql_text(SQL_HANDLE));

    INSERT INTO query_log (query_text, execution_time, duration, rows_affected)
    VALUES (
        @query_text,
        GETDATE(),
        DATEDIFF(ms, sys.dm_exec_requests.start_time, sys.dm_exec_requests.end_time),
        @@ROWCOUNT
    );
END;

UPDATE grades SET Grade = 95 WHERE StudentID = 1 AND CourseID = 101;

